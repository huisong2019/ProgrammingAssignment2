##  Caching the Inverse of a Matrix
## creates a special "matrix" object that can cache its inverse

## Write a short comment describing this function

makeCacheMatrix <- function(x = matrix()) {

  
          m <- matrix(x)
          set <- function(y) {
              X <<- y
              m <<- matrix(x)
      
         }
          get <- function() x
          setmatrix <- function(matrix) m <-matix(x) 
          getmatrix <- function() m 
          list (set=set, get=get, setmatrix=setmatrix, getmatrix=getmatrix)

 }


## computes the inverse of the special "matrix" returned by makeCacheMatrix above.

cacheSolve <- function(x, ...) {
 
 ## Return a matrix that is the inverse of 'x'


  
          m <- x$getmatrix()
          if (matrix(x))  {
            
              message("getting inverse cached matrix data")
              return (m)
          }
          data <- x$get()
          m <- solve(data, ...)
          x$setmatrix(m)
          m
}



